version: '3.8'

services:
  brain-ai:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: brain-ai-system
    restart: unless-stopped
    environment:
      - RUST_LOG=${RUST_LOG:-info}
      - BRAIN_SYSTEM_ID=${BRAIN_SYSTEM_ID:-brain-ai-prod}
      - BRAIN_SYSTEM_NAME=${BRAIN_SYSTEM_NAME:-Brain AI Production}
      - BRAIN_VERSION=${BRAIN_VERSION:-1.0.0}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
      - MODEL=${MODEL:-claude-3-opus-20240229}
      - MAX_TOKENS=${MAX_TOKENS:-8192}
      - TEMPERATURE=${TEMPERATURE:-0.7}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DEFAULT_SUBTASKS=${DEFAULT_SUBTASKS:-5}
      - DEFAULT_PRIORITY=${DEFAULT_PRIORITY:-medium}
      - PROJECT_NAME=${PROJECT_NAME:-Brain AI}
      - PROJECT_VERSION=${PROJECT_VERSION:-1.0.0}
      - PERPLEXITY_MODEL=${PERPLEXITY_MODEL:-sonar-medium-online}
    volumes:
      - brain_data:/app/data
      - brain_logs:/app/logs
      - brain_backups:/app/backups
      - ./scripts/config.toml:/app/scripts/config.toml:ro
    ports:
      - "${BRAIN_API_PORT:-8080}:8080"
    networks:
      - brain-network
    healthcheck:
      test: ["CMD", "brain", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Neo4j for concept graph (if using external Neo4j)
  neo4j:
    image: neo4j:5.15-community
    container_name: brain-neo4j
    restart: unless-stopped
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD:-brain-ai-password}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    ports:
      - "${NEO4J_HTTP_PORT:-7474}:7474"
      - "${NEO4J_BOLT_PORT:-7687}:7687"
    networks:
      - brain-network
    profiles:
      - neo4j

  # Optional: Redis for caching (if needed)
  redis:
    image: redis:7-alpine
    container_name: brain-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-brain-ai-redis}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - brain-network
    profiles:
      - redis

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: brain-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./scripts/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - brain-network
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: brain-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-brain-ai-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./scripts/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./scripts/grafana-datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - brain-network
    profiles:
      - monitoring
    depends_on:
      - prometheus

volumes:
  brain_data:
    driver: local
  brain_logs:
    driver: local
  brain_backups:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  brain-network:
    driver: bridge 
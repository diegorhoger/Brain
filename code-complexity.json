{
    "identity": {
      "description": "This configuration defines the highest standards for multi-crate or microservice-based software systems. It enforces best-in-class engineering practices per isolated module or service, ensuring maintainability, testability, and architectural scalability across distributed systems.",
      "target_profile": "Top 0.001% software engineers",
      "architecture_style": "Microservice or Multi-Crate",
      "language_support": ["Rust", "Go", "Python", "TypeScript", "C#", "Kotlin", "Swift"]
    },
  
    "modular_design": {
      "enforce_microservice_boundary": true,
      "crate_level_isolation": true,
      "shared_interfaces_only": true,
      "cross-crate API contracts": "via OpenAPI, protobuf, or JSON Schema",
      "no global state": true,
      "build_independent_deployment": true
    },
  
    "crate_or_service_structure": {
      "types": ["core", "api", "infra", "domain", "cli", "utils", "integration"],
      "per-crate standards": {
        "core": "business logic only, no I/O",
        "api": "expose REST/gRPC, clean routing",
        "infra": "external system adapters (DB, cache)",
        "utils": "pure helpers, no side-effects"
      }
    },
  
    "code_formatting": {
      "line_length": 100,
      "indentation": "4 spaces",
      "trailing_commas": true,
      "naming": {
        "structs_enums": "PascalCase",
        "functions": "snake_case",
        "constants": "SCREAMING_SNAKE_CASE"
      },
      "comments_required": true,
      "docstrings": "all public interfaces"
    },
  
    "code_quality_rules": {
      "cyclomatic_complexity_max": 10,
      "cognitive_complexity_max": 15,
      "maintainability_index_min": 75,
      "nesting_depth_max": 3,
      "function_length_max": 50,
      "file_length_max": 400,
      "avoid_large_services": true,
      "prefer_trait_based_interfaces": true,
      "no_duplicate_logic_across_crates": true
    },
  
    "safety_rules": {
      "unwrap_or_expect_banned": true,
      "panic_free_production_code": true,
      "input_validation_required": true,
      "enforce_explicit_error_propagation": true,
      "no_hardcoded_config": true,
      "no_dynamic_env_leak": true
    },
  
    "testing_policy": {
      "unit_test_coverage_min": 90,
      "integration_tests_required": true,
      "contract_tests_between_services": true,
      "use_test_doubles_for_external_calls": true,
      "test_per_crate_or_service": true
    },
  
    "tooling": {
      "linting": {
        "Rust": ["clippy", "cargo fmt"],
        "Go": ["golangci-lint"],
        "Python": ["ruff", "mypy", "black"],
        "JS/TS": ["eslint", "prettier"]
      },
      "ci_per_service_or_crate": true,
      "complexity_analysis": true,
      "dependency_vulnerability_scan": true
    },
  
    "documentation": {
      "crate_readme_required": true,
      "public_api_docs_autogenerated": true,
      "openapi_contracts_if_rest": true,
      "proto_definitions_if_grpc": true,
      "changelogs_per_crate": true
    },
  
    "deployment": {
      "dockerized_per_service": true,
      "independent_versioning": true,
      "semantic_versioning": true,
      "env_file_isolated": true,
      "infrastructure_as_code": "recommended"
    },
  
    "design_patterns": {
      "preferred": [
        "Functional Core, Imperative Shell",
        "Service-Oriented Boundaries",
        "Clean Architecture",
        "Hexagonal Ports and Adapters",
        "CQRS (if complex domain)"
      ],
      "anti_patterns": [
        "Shared mutable global state",
        "God service",
        "Excessive coupling between crates",
        "Business logic in controller"
      ]
    },
  
    "meta": {
      "version": "2.0.0",
      "generated_at": "2025-07-01",
      "preferred_repos": "multi-repo or nested workspaces only",
      "compliance_targets": [
        "OWASP Secure Coding",
        "NASA/JPL Rust Safety Rules",
        "ISO 25010: Maintainability"
      ]
    }
  }
  
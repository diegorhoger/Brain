{"task_id":"HumanEval/0","completion":"    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id":"HumanEval/1","completion":"    result = []\n    current = \"\"\n    depth = 0\n    for char in paren_string:\n        if char == ' ':\n            continue  # Ignore spaces as specified\n        if char == '(':\n            depth += 1\n        elif char == ')':\n            depth -= 1\n        current += char\n        if depth == 0 and current.strip():\n            result.append(current.strip())\n            current = \"\"\n    return result"}
{"task_id":"HumanEval/2","completion":"    return number - int(number)"}
{"task_id":"HumanEval/3","completion":"    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id":"HumanEval/4","completion":"    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"task_id":"HumanEval/5","completion":"    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id":"HumanEval/6","completion":"    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result"}
{"task_id":"HumanEval/7","completion":"    return [s for s in strings if substring in s]"}
{"task_id":"HumanEval/8","completion":"    if not numbers:\n        return (0, 1)\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return (total_sum, total_product)"}
{"task_id":"HumanEval/9","completion":"    if not numbers:\n        return []\n    result = []\n    current_max = numbers[0]\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    return result"}
{"task_id":"HumanEval/10","completion":"    if not string:\n        return string\n    for i in range(len(string)):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]"}
{"task_id":"HumanEval/11","completion":"    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result"}
{"task_id":"HumanEval/12","completion":"    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id":"HumanEval/13","completion":"    while b:\n        a, b = b, a % b\n    return a"}
{"task_id":"HumanEval/14","completion":"    return [string[:i+1] for i in range(len(string))]"}
{"task_id":"HumanEval/15","completion":"    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id":"HumanEval/16","completion":"    return len(set(string.lower()))"}
{"task_id":"HumanEval/17","completion":"    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[note] for note in music_string.split() if note in note_map]"}
{"task_id":"HumanEval/18","completion":"    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id":"HumanEval/19","completion":"    if not numbers:\n        return ''\n    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    reverse_map = {v: k for k, v in number_map.items()}\n    nums = [number_map[word] for word in numbers.split() if word in number_map]\n    nums.sort()\n    return ' '.join(reverse_map[num] for num in nums)"}
{"task_id":"HumanEval/20","completion":"    closest_pair = None\n    min_distance = float('inf')\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n    return tuple(sorted(closest_pair))"}
{"task_id":"HumanEval/21","completion":"    min_val = min(numbers)\n    max_val = max(numbers)\n    if min_val == max_val:\n        return [0.0] * len(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id":"HumanEval/22","completion":"    return [x for x in values if isinstance(x, int)]"}
{"task_id":"HumanEval/23","completion":"    return len(string)"}
{"task_id":"HumanEval/24","completion":"    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id":"HumanEval/25","completion":"    factors = []\n    d = 2\n    while d * d <= n:\n        while n % d == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id":"HumanEval/26","completion":"    seen = set()\n    result = []\n    for item in numbers:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result"}
{"task_id":"HumanEval/27","completion":"    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id":"HumanEval/28","completion":"    return ''.join(strings)"}
{"task_id":"HumanEval/29","completion":"    return [s for s in strings if s.startswith(prefix)]"}
{"task_id":"HumanEval/30","completion":"    return [x for x in l if x > 0]"}
{"task_id":"HumanEval/31","completion":"    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id":"HumanEval/32","completion":"    def poly(x, xs):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(xs))\n    \n    def poly_derivative(x, xs):\n        return sum(i * coeff * (x ** (i - 1)) for i, coeff in enumerate(xs) if i > 0)\n    \n    x = 0.0\n    for _ in range(100):\n        fx = poly(x, xs)\n        if abs(fx) < 1e-10:\n            break\n        fpx = poly_derivative(x, xs)\n        if abs(fpx) < 1e-10:\n            break\n        x = x - fx / fpx\n    return x"}
{"task_id":"HumanEval/33","completion":"    result = l[:]\n    third_elements = [l[i] for i in range(0, len(l), 3)]\n    third_elements.sort()\n    for i, val in enumerate(third_elements):\n        result[i * 3] = val\n    return result"}
{"task_id":"HumanEval/34","completion":"    seen = set()\n    result = []\n    for item in l:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return sorted(result)"}
{"task_id":"HumanEval/35","completion":"    return max(l)"}
{"task_id":"HumanEval/36","completion":"    count = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id":"HumanEval/37","completion":"    result = l[:]\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort()\n    for i, val in enumerate(even_indices):\n        result[i * 2] = val\n    return result"}
{"task_id":"HumanEval/38","completion":"    def encode_cyclic(s):\n        groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n        groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n        return \"\".join(groups)\n    \n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1:] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id":"HumanEval/39","completion":"    def is_prime(n):\n        if n < 2: return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0: return False\n        return True\n    \n    fib = [0, 1]\n    while len(fib) <= n or not is_prime(fib[-1]):\n        fib.append(fib[-1] + fib[-2])\n        if len(fib) > n and is_prime(fib[n]):\n            return fib[n]\n    return fib[n]"}
{"task_id":"HumanEval/40","completion":"    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id":"HumanEval/41","completion":"    return n * n"}
{"task_id":"HumanEval/42","completion":"    return [x + 1 for x in l]"}
{"task_id":"HumanEval/43","completion":"    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id":"HumanEval/44","completion":"    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(reversed(digits))"}
{"task_id":"HumanEval/45","completion":"    import math\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)"}
{"task_id":"HumanEval/46","completion":"    if n < 4:\n        return [0, 0, 2, 0][n]\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"task_id":"HumanEval/47","completion":"    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 0:\n        return (sorted_l[n//2 - 1] + sorted_l[n//2]) / 2\n    else:\n        return sorted_l[n//2]"}
{"task_id":"HumanEval/48","completion":"    return text == text[::-1]"}
{"task_id":"HumanEval/49","completion":"    return pow(2, n, p)"}
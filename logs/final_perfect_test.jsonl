{"task_id":"HumanEval/0","completion":"    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id":"HumanEval/1","completion":"    result = []\n    current = \"\"\n    depth = 0\n    for char in paren_string:\n        if char == ' ':\n            continue  # Ignore spaces as specified\n        if char == '(':\n            depth += 1\n        elif char == ')':\n            depth -= 1\n        current += char\n        if depth == 0 and current.strip():\n            result.append(current.strip())\n            current = \"\"\n    return result"}
{"task_id":"HumanEval/2","completion":"    return number - int(number)"}
{"task_id":"HumanEval/3","completion":"    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id":"HumanEval/4","completion":"    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"task_id":"HumanEval/5","completion":"    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id":"HumanEval/6","completion":"    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result"}
{"task_id":"HumanEval/7","completion":"    return [s for s in strings if substring in s]"}
{"task_id":"HumanEval/8","completion":"    if not numbers:\n        return (0, 1)\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return (total_sum, total_product)"}
{"task_id":"HumanEval/9","completion":"    if not numbers:\n        return []\n    result = []\n    current_max = numbers[0]\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    return result"}
{"task_id":"HumanEval/10","completion":"    if not string:\n        return string\n    for i in range(len(string)):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]"}
{"task_id":"HumanEval/11","completion":"    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result"}
{"task_id":"HumanEval/12","completion":"    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id":"HumanEval/13","completion":"    while b:\n        a, b = b, a % b\n    return a"}
{"task_id":"HumanEval/14","completion":"    return [string[:i+1] for i in range(len(string))]"}